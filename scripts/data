#!/usr/local/sbin/suid-python --virtualenv

from scription import *
from VSS.openerp import get_records
from VSS.time_machine import PropertyDict
import openerplib
import os

HOST = DB = USER = PW = None
execfile('%s/config/credentials' % os.environ['VIRTUAL_ENV'])

US_CA_states = (
    ('AL', 'US', 'Alabama'),
    ('AK', 'US', 'Alaska'),
    ('AZ', 'US', 'Arizona'),
    ('AR', 'US', 'Arkansas'),
    ('AS', 'US', 'American Samoa'),
    ('CA', 'US', 'California'),
    ('CO', 'US', 'Colorado'),
    ('CT', 'US', 'Connecticut'),
    ('DE', 'US', 'Delaware'),
    ('DC', 'US', 'District of Columbia'),
    ('FL', 'US', 'Florida'),
    ('GA', 'US', 'Georgia'),
    ('HI', 'US', 'Hawaii'),
    ('ID', 'US', 'Idaho'),
    ('IL', 'US', 'Illinois'),
    ('IN', 'US', 'Indiana'),
    ('IA', 'US', 'Iowa'),
    ('KS', 'US', 'Kansas'),
    ('KY', 'US', 'Kentucky'),
    ('LA', 'US', 'Louisiana'),
    ('ME', 'US', 'Maine'),
    ('MT', 'US', 'Montana'),
    ('NE', 'US', 'Nebraska'),
    ('NV', 'US', 'Nevada'),
    ('NH', 'US', 'New Hampshire'),
    ('NJ', 'US', 'New Jersey'),
    ('NM', 'US', 'New Mexico'),
    ('NY', 'US', 'New York'),
    ('NC', 'US', 'North Carolina'),
    ('ND', 'US', 'North Dakota'),
    ('OH', 'US', 'Ohio'),
    ('OK', 'US', 'Oklahoma'),
    ('OR', 'US', 'Oregon'),
    ('MD', 'US', 'Maryland'),
    ('MA', 'US', 'Massachusetts'),
    ('MI', 'US', 'Michigan'),
    ('MN', 'US', 'Minnesota'),
    ('MS', 'US', 'Mississippi'),
    ('MO', 'US', 'Missouri'),
    ('PA', 'US', 'Pennsylvania'),
    ('PR', 'US', 'Puerto Rico'),
    ('RI', 'US', 'Rhode Island'),
    ('SC', 'US', 'South Carolina'),
    ('SD', 'US', 'South Dakota'),
    ('TN', 'US', 'Tennessee'),
    ('TX', 'US', 'Texas'),
    ('UT', 'US', 'Utah'),
    ('VT', 'US', 'Vermont'),
    ('VA', 'US', 'Virginia'),
    ('VI', 'US', 'US Virgin Islands'),
    ('WA', 'US', 'Washington'),
    ('WV', 'US', 'West Virginia'),
    ('WI', 'US', 'Wisconsin'),
    ('WY', 'US', 'Wyoming'),
    ('PR', 'US', 'Puerto Rico'),
    ('AB', 'CA', 'Alberta'),
    ('BC', 'CA', 'British Columbia'),
    ('MB', 'CA', 'Manitoba'),
    ('NB', 'CA', 'New Brunswick'),
    ('NL', 'CA', 'Newfoundland and Labrador'),
    ('ON', 'CA', 'Ontario'),
    ('PE', 'CA', 'Prince Edward Island'),
    ('QC', 'CA', 'Quebec'),
    ('SK', 'CA', 'Saskatchewan'),
    ('NT', 'CA', 'Northwest Territories'),
    ('YT', 'CA', 'Yukon'),
    ('NU', 'CA', 'Nunavut'),
    ('NS', 'CA', 'Nova Scotia'),
    )

def connect(host, database, login, password):
    OE = PropertyDict()
    OE.conn = conn = openerplib.get_connection(hostname=host, database=database, login=login, password=password)
    OE.res_country = conn.get_model('res.country')
    OE.product_uom_categories = conn.get_model('product.uom.categ')
    OE.product_uom = conn.get_model('product.uom')
    OE.res_country_state = conn.get_model('res.country.state')
    return OE


@Command()
def fix_uom():
    OE = connect(HOST, DB, USER, PW)
    uom_categ = get_records(OE, 'product.uom.categ')
    uom_categ = PropertyDict((cat.name.lower(), cat) for cat in uom_categ)
    uom = get_records(OE, 'product.uom', domain=[('uom_type','=','reference')])
    uom = PropertyDict((m.name.lower(), m) for m in uom)
    if 'kg' not in uom:
        raise ValueError("don't know how to link to %s" % uom_categ.weight.name)
    if 'liter' not in uom and 'liter(s)' not in uom and 'l' not in uom:
        raise ValueError("don't know how to link to %s" % uom_categ.volume.name)
    if not get_records(OE, 'product.uom', domain=[('name','=','lt')], max_qty=1):
        OE.product_uom.create(dict(
            name='lt',
            full_name='long ton',
            factor=0.000984207,
            rounding=0.0000001,
            uom_type='bigger',
            active=True,
            category_id=uom_categ.weight.id,
            ))
    if not get_records(OE, 'product.uom', domain=[('name','=','ton')], max_qty=1):
        OE.product_uom.create(dict(
            name='ton',
            full_name='short ton',
            factor=0.00110231,
            rounding=0.0000001,
            uom_type='bigger',
            active=True,
            category_id=uom_categ.weight.id,
            ))
    if not get_records(OE, 'product.uom', domain=[('name','=','lb')], max_qty=1):
        OE.product_uom.create(dict(
            name='lb',
            full_name='Pound',
            factor=2.20462,
            rounding=0.0000001,
            uom_type='smaller',
            active=True,
            category_id=uom_categ.weight.id,
            ))
    if not get_records(OE, 'product.uom', domain=[('name','=','oz')], max_qty=1):
        OE.product_uom.create(dict(
            name='oz',
            full_name='ounce',
            factor=35.274,
            rounding=0.0000001,
            uom_type='smaller',
            active=True,
            category_id=uom_categ.weight.id,
            ))
    if not get_records(OE, 'product.uom', domain=[('name','=','ga')], max_qty=1):
        OE.product_uom.create(dict(
            name='ga',
            full_name='gallon',
            factor=0.264172,
            rounding=0.0000001,
            uom_type='bigger',
            active=True,
            category_id=uom_categ.volume.id,
            ))
    if not get_records(OE, 'product.uom', domain=[('name','=','hu')], max_qty=1):
        OE.product_uom.create(dict(
            name='hu',
            full_name='hundred',
            factor=0.01,
            uom_type='bigger',
            active=True,
            category_id=uom_categ.unit.id,
            ))
    for abbr, category, new_abbr, full_name in (
            ('t', 'weight', 'mt', 'metric ton'),
            ('Liter(s)', 'volume', 'l', 'liter'),
            ('Unit(s)', 'unit', 'ea', 'unit'),
            ('Dozen(s)', 'unit', 'doz', 'dozen'),
            ('Hour(s)', 'working time', 'hr', 'hour'),
            ('Day(s)', 'working time', 'day', 'day'),
            ('cm', 'length / distance', 'cm', 'centimeter'),
            ('m', 'length / distance', 'm', 'meter'),
            ('km', 'length / distance', 'km', 'kilometer'),
            ('g', 'weight', 'g', 'gram'),
            ('kg', 'weight', 'kg', 'kilogram'),
            ):
        item = get_records(OE, 'product.uom', domain=[('name','=',abbr),('category_id','=',uom_categ[category].id)], max_qty=1)
        if item:
            OE.product_uom.write(item[0].id, dict(name=new_abbr, full_name=full_name))

@Command()
def fix_state():
    "select id, code, name from res_country"
    OE = connect(HOST, DB, USER, PW)
    countries = get_records(OE, 'res.country', domain=[('code','in',['US','CA'])], fields=['id','code','name'])
    countries = dict([(r.code, r.id) for r in countries])
    for state_abbr, country_abbr, state_name in US_CA_states:
        if not get_records(OE, 'res.country.state', domain=[('code','=',state_abbr)], max_qty=1):
            OE.res_country_state.create(dict(
                code=state_abbr,
                country_id=countries[country_abbr],
                name=state_name,
                ))
            print "%s:%s added" % (state_abbr, state_name)

if __name__ == '__main__':
    Run()
